package com.sap.oss.phosphor.fosstars.model.value;

import static com.sap.oss.phosphor.fosstars.TestUtils.createBasicVulnerability;
import static com.sap.oss.phosphor.fosstars.model.value.Vulnerability.Builder.newVulnerability;
import static java.util.Collections.emptyList;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.sap.oss.phosphor.fosstars.model.value.CVSS.V2.Impact;
import com.sap.oss.phosphor.fosstars.model.value.Vulnerability.Resolution;
import com.sap.oss.phosphor.fosstars.util.Json;
import com.sap.oss.phosphor.fosstars.util.Yaml;
import java.io.IOException;
import java.util.Date;
import java.util.Optional;
import org.junit.jupiter.api.Test;

public class VulnerabilityTest {

  @Test
  public void testConfusingResolution() {
    assertThrows(IllegalArgumentException.class, () -> {
      new Vulnerability("CVE-1", "test",
          new CVSS.V2(5.0, Impact.COMPLETE, Impact.PARTIAL, Impact.NONE),
          emptyList(),
          Resolution.UNPATCHED, new Date(1), new Date(2), new Date(3), emptyList());
    });
  }

  @Test
  public void testConfusingIntroducedDate() {
    assertThrows(IllegalArgumentException.class, () -> {
      new Vulnerability("CVE-1", "test",
          new CVSS.V2(5.0, Impact.COMPLETE, Impact.PARTIAL, Impact.NONE),
          emptyList(),
          Resolution.UNPATCHED, new Date(2), new Date(1), new Date(3), emptyList());
    });
  }

  @Test
  public void testConfusingPublishedDate() {
    assertThrows(IllegalArgumentException.class, () -> {
      new Vulnerability("CVE-1", "test",
          new CVSS.V2(5.0, Impact.COMPLETE, Impact.PARTIAL, Impact.NONE),
          emptyList(),
          Resolution.UNPATCHED, new Date(4), new Date(3), new Date(2), emptyList());
    });
  }

  @Test
  public void testConstructor() {
    Vulnerability vulnerability = newVulnerability("CVE-2019-0001").make();
    assertEquals("CVE-2019-0001", vulnerability.id());
    assertEquals(Optional.empty(), vulnerability.description());
    assertFalse(vulnerability.cvss().isPresent());
    assertEquals(emptyList(), vulnerability.references());
    assertEquals(Resolution.UNKNOWN, vulnerability.resolution());
    assertEquals(Optional.empty(), vulnerability.introduced());
    assertEquals(Optional.empty(), vulnerability.fixed());
  }

  @Test
  public void testJsonSerialization() throws IOException {
    Vulnerability vulnerability = createBasicVulnerability(7.1, "2.3.4", "2.4.1");
    Vulnerability clone = Json.read(Json.toBytes(vulnerability), Vulnerability.class);
    assertEquals(vulnerability, clone);
    assertEquals(vulnerability.hashCode(), clone.hashCode());
  }

  @Test
  public void testYamlSerialization() throws IOException {
    Vulnerability vulnerability = createBasicVulnerability(7.1, "2.3.4", "2.4.1");
    Vulnerability clone = Yaml.read(Yaml.toBytes(vulnerability), Vulnerability.class);
    assertEquals(vulnerability, clone);
    assertEquals(vulnerability.hashCode(), clone.hashCode());
  }

}
